%%%%%%%%%%%%%%%%%%%%%%%%
% Wasser - Ewald Summe %
%%%%%%%%%%%%%%%%%%%%%%%%

%% Anfangsbedingungen: 3D-System, Positionen aus 3.3 importiert
% N_cell = N_cell,x * N_cell,y (r_cut = 2.5*sigma)

% Parameter importieren, https://docs.lammps.org/Howto_tip3p.html
mass_O = 15.9994; % amu
mass_H = 1.008;
q_O = -0.834 * 1.602e-19; % e
q_H = 0.417 * 1.602e-19;

N_A = 6.022e23;
epsilon_OO = 0.1521 * 1/N_A * 4.184; % kcal/mole to kJ
sigma_OO = 3.1507; % Angström
epsilon_HH = 0.0 * 1/N_A * 4.184;
sigma_HH = 1.0;
epsilon_OH = 0.0 * 1/N_A * 4.184;
sigma_OH = 1.0;
K_OH = 450; % kcal/mole/A², bond, Federkonstante
r0_OH = 0.9572; % A
K_HOH = 55.0; % kcal/mole, angle
theta0_HOH = 104.52;

epsilon_0 =8.86e-22*1e3; % C²/(N*Angstrom²)
skal = 1/(4*pi*epsilon_0);
G = 0.35; % Parameter der Gaußschen Glockenkurve / A⁻¹
a = 4;

E_pot_all = zeros(8,1);
Anz_Mol = zeros(8,1);
E_pro_Molekuel = zeros(8,1);
d_x = 30;
d_y = 30;
d_z = 30;
for i = 1:10
    [coordinates_0, v, d, np_Teilchen] = Initialisierung_PBC(d_x*i, d_y*i, d_z*i, np_Teilchen*i, sigma_OO, theta0_HOH, r0_OH, q_O, q_H);

    Atome_dim = Atome_dim + 1;
    i = i+1;
    % Teilchen in Box
    x = 0 : 2*sigma_OO : 2*sigma_OO*Atome_dim;
    y = 0 : 2*sigma_OO : 2*sigma_OO*Atome_dim;
    z = 0 : 2*sigma_OO : 2*sigma_OO*Atome_dim;
    [X,Y,Z] = meshgrid(x,y,z);

    coordinates_O = [X(:), Y(:), Z(:)];
    np_oxygen = length(coordinates_O);
    coordinates_O = [repmat(q_O, np_oxygen, 1), coordinates_O];

    u = 0 - r0_OH : 1.5*sigma_OO : 1.5*sigma_OO*Atome_dim;
    v = 0 : 1.5*sigma_OO : 1.5*sigma_OO*Atome_dim;
    w = 0 : 1.5*sigma_OO : 1.5*sigma_OO*Atome_dim;
    [U,V,W] = meshgrid(u,v,w);

    q = 0 - cos(theta0_HOH - 90)*r0_OH : 1.5*sigma_OO : 1.5*sigma_OO*Atome_dim - cos(theta0_HOH - 90)*r0_OH;
    r = 0 + sin(theta0_HOH - 90)*r0_OH : 1.5*sigma_OO : 1.5*sigma_OO*Atome_dim + sin(theta0_HOH - 90)*r0_OH;
    s = 0 : 1.5*sigma_OO : 1.5*sigma_OO*Atome_dim;
    [Q,R,S] = meshgrid(q,r,s);

    coordinates_H = [U(:), V(:), W(:); Q(:), R(:), S(:)];
    np_hydrogen = length(coordinates_H);

    coordinates_0 = [coordinates_O; repmat(q_H, np_hydrogen, 1), coordinates_H];
    np_Teilchen = length(coordinates_0);
    [V_LJ, V_Coulomb] = Energie(coordinates_0, sigma_OO, sigma_OH, sigma_HH, epsilon_OO, epsilon_OH, epsilon_HH,a, skal, q_O, q_H);
    E_pot_all(i) = V_LJ + V_Coulomb;
    Anz_Mol(i) = length(coordinates_O);
    E_pro_Molekuel(i) = E_pot_all(i)/Anz_Mol(i);
end



figure;
for i = 1:length(E_pro_Molekuel)
    plot(Anz_Mol(i), E_pro_Molekuel(i), 'b*-', 'LineWidth', 1.5);
    hold on
end

title(['Energie pro Molekül']);
xlabel('Anzahl an Molekülen'); ylabel('Energie / kJ'); grid on;


%% Funktionen
function [a, sigma, E, m, t, delta_t, n_steps, t_end] = Parameter(Textdatei1)
% Daten importieren
fileID = fopen(Textdatei1);
while ~feof(fileID)
    line = fgets(fileID); % Zeile für Zeile Datei durchgehen
    % 1. Integrator bestimmen
    if contains (line, 'Integrator')
        integrator = strtrim(strrep(line, 'Integrator: ', '')); % string trim, strrep: find and replace substring
    elseif contains(line, 'dt')
        delta_t = str2double(strtrim(strrep(line, 'dt: ', '')));
    elseif contains(line, 'n_steps')
        n_steps = str2double(strtrim(strrep(line, 'n_steps: ', '')));
        t_end = delta_t*n_steps;
    end
    if strcmp(integrator,'Runge-Kutta') == 1 % strcmp: compare strings
        if contains(line, 'Order')
            Order = str2double(strtrim(strrep(line, 'Order: ', '')));
        end
    end
    % 2. Force-Field
    if contains(line, 'Force-Field')
        FF = strtrim(strrep(line, 'Force-Field: ', ''));
    elseif contains(line, 'alpha')
        a = str2double(strtrim(strrep(line, 'alpha: ', '')));
    elseif contains(line, 'sigma')
        sigma = str2double(strtrim(strrep(line, 'sigma: ', '')));
    elseif contains(line, 'E')
        E = str2double(strtrim(strrep(line, 'E: ', '')));
    elseif contains(line, 'Masse')
        m = str2double(strtrim(strrep(line, 'Masse: ', '')));
    end
    
end
t = 0;
fileID = fclose(fileID);
end

function [coordinates_0, v, d, np_Teilchen] = Initialisierung_PBC(d_x, d_y, d_z, np_Teilchen, sigma_OO, theta0_HOH, r0_OH, q_O, q_H)
% Initialisierung
% zentrierte Box
d = [d_x, d_y, d_z];
% np zufällig verteilte Punkt-Teilchen in den Grenzen der Box

r = zeros(np_Teilchen,3,np_Teilchen);
r_betrag = zeros(np_Teilchen,1,np_Teilchen);
% Initialisierte Zufallszahlen mit 1239465719 für Vergleichbarkeit mit rng
rng(1239465719);
xyz_0 = rand (np_Teilchen, 3); % rand: Zufallszahlen zwischen 0 und 1
np_oxygen = length(xyz_0);
coordinates_O = bsxfun(@minus, bsxfun(@times, xyz_0, d), 0.5*d); % Zufallszahlen im Intervall von d

n = length(xyz_0);

% r_min implementieren
for i = 1:n
    r(:,:,i) = bsxfun(@minus, coordinates_O, coordinates_O(i,:));
    r(:,:,i) = r(:,:,i) - d.* round(r(:,:,i)./d); % PBC: wenn Abstand zu Teilchen in nächster Box kürzer
end
for i = 1:n
    for j = i:n
        r_betrag(j,1,i) = norm(r(j,:,i));
        r_betrag(i,1,j) = r_betrag(j,1,i);
        r_betrag(j,1,j) = 2*sigma_OO;
        while r_betrag(j,1,i) < 2*sigma_OO
            xyz_0(j,:) = rand(1,3);
            coordinates_O(j,:) = bsxfun(@minus, bsxfun(@times, xyz_0(j,:), d), 0.5*d);
            r(:,:,i) = bsxfun(@minus, coordinates_O(i,:), coordinates_O);
            r(:,:,i) = r(:,:,i) - d.* round(r(:,:,i)./d);
            r_betrag(j,1,i) = norm(r(j,:,i));
            r_betrag(i,1,j) = r_betrag(j,1,i);
        end
    end
end     
for i = 1:np_oxygen
    coordinates_H(i,:) = [coordinates_O(i,1) - cos(theta0_HOH - 90) * r0_OH, coordinates_O(i,2) + sin(theta0_HOH - 90)*r0_OH, coordinates_O(i,3)];
    coordinates_H(np_oxygen+i,:) = [coordinates_O(i,1:2) - r0_OH, coordinates_O(i,2:3)];
end
coordinates_0 = [repmat(q_O, np_oxygen, 1), coordinates_O; repmat(q_H, 2*np_oxygen, 1), coordinates_H];
v = zeros(n,3);
end

function [V_LJ, V_Coulomb] = Energie(xyz, sigma_OO, sigma_OH, sigma_HH, epsilon_OO, epsilon_OH, epsilon_HH,a, skal, q_O, q_H)
n = length(xyz);
E_LJ = zeros(n,1);
E_Coulomb = zeros(n,1);

for h = 1:n
    r = zeros(n,4);
    r_betrag = zeros(n,1);
    E_neu = zeros(n,1);
    E = zeros(n,1);
    for i = 1:n
        r(i,:) = xyz(i,:)-xyz(h,:);
        r_betrag(i) = norm(r(i,2:4));
    end
    for i = 1:n
        if r_betrag(i) == 0
            E_neu(i) = 0;
            E(i) = 0;
        elseif xyz(h,1) == q_O && r(i,1) == 0 % O-O
            E_neu(i) = a*epsilon_OO*(((sigma_OO.^12)./(sum(r(i,2:4).^2,2).^6))-((sigma_OO.^6)./((sum(r(i, 2:4).^2,2).^3))));
            E(i) = skal*q_O^2/r_betrag(i);
        elseif xyz(h,1) == q_O && r(i,1) ~= 0 || xyz(h,1) == q_H && r(i,1) ~= 0 % O-H
            E_neu(i) = a*epsilon_OH*(((sigma_OH.^12)./(sum(r(i,2:4).^2,2).^6))-((sigma_OH.^6)./((sum(r(i, 2:4).^2,2).^3))));
            E(i) = skal*q_O*q_H/r_betrag(i);
        elseif xyz(h,1) == q_H && r(i,1) == 0 % H-H
            E_neu(i) = a*epsilon_HH*(((sigma_HH.^12)./(sum(r(i,2:4).^2,2).^6))-((sigma_HH.^6)./((sum(r(i, 2:4).^2,2).^3))));
            E(i) = skal*q_H^2/r_betrag(i);
        end
        if r_betrag(i) > 2.5*sigma_OO % Cut-off nur für LJ
            E_neu(i) = 0;
        end
    end
    E_LJ(h,:) = sum(E_neu, 1);
    E_Coulomb(h,:) = sum(E,1);
end
V_LJ = .5 * sum(E_LJ, 1);
V_Coulomb = .5*sum(E_Coulomb,1);

end

function Generate_xyz(M, Dateiname, q_O, q_H)
% Output als xyz Datei
n = size(M, 1);
% Atomanzahl = repmat({'Ar'},n,1);
fileID = fopen(Dateiname, 'w'); 
Element = strings(n,1);

for i = 1:n
    if M(i,1) == q_O
        Element(i) = 'O';
    elseif M(i,1) == q_H
        Element(i) = 'H';
    end
end

for i=1:size(M,3)
    fprintf(fileID, '%d\n', n);
    fprintf(fileID, 'Moleküldynamik_3D\n');
    for j = 1:n
        fprintf(fileID, '%s %f %f %f\n', Element{j}, M(j,2,i), M(j,3,i), M(j,4,i));
    end
end

fclose(fileID);
end



