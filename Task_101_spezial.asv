% Anfangsbedingungen (2D)

x_N = [0, 0; 0, 1; 0, 5.36; 34.75, 0]; % Ort
v_N = [0, 0; -1, 0; -0.425, 0; 0, 0.0296]; % Geschwindigkeit
m_N = [1; 3e-6; 9.55e-4; 1e-14]; % Masse

% Berechnung der Ausgangskräfte
n = length(x_N);

F = zeros(n,2);

for i=1:n
    for j=1:n
        if j~=i
            F(i,:) = F(i,:) + Grav_Pot(x_N(i,:), x_N(j,:), m_N(i), m_N(j));  
        end
    end
end

figure;
C = {'k*:','b*:','r*:','g*:'};
for i=1:n
    plot(x_N(i,1), x_N(i,2),C{i}, 'LineWidth', 1);
    hold on
end
hold on

h = 0.1; % Zeitschritt;
t_end = h*10;
t = 0;
x_Nneu = zeros(n,2);
v_Nneu = zeros(n,2);
x_positions = zeros(n,2,t_end/h);
iteration = 0;

k_1 = zeros(n,2);
k_2 = zeros(n,2);
k_3 = zeros(n,2);
k_4 = zeros(n,2);
M = zeros(n,2);

% function [x_Nneu, v_Nneu] = runge_kutta(x, v, m, h)
%     n = size(x, 1);  % Anzahl der Himmelskörper
%     
%     % Kinematische Funktionen
%     dxdt = v;
%     dvdt = grav_force(x, m) ./ m;
tic
while t < t_end
    t = t + h;
    iteration = iteration + 1;  
    %     Berechnung der vier Zwischenschritte
    k1_v = h*F./m_N;
    k1_x = h*v_N;
    F1 = zeros(n,2);
    for i=1:n
        for j=1:n
            if j~=i
                F1(i,:) = F1(i,:) + Grav_Pot((x_N(i,:) + 0.5*k1_x(i,:)), (x_N(j,:) + 0.5*k1_x(j,:)), m_N(i), m_N(j));
            end
        end
    end

    k2_v = h*F1./m_N;
    k2_x = h*(v_N + 0.5*k1_v);

    F2 = zeros(n,2);
    for i=1:n
        for j=1:n
            if j~=i
                F2(i,:) = F2(i,:) + Grav_Pot((x_N(i,:) + 0.5*k2_x(i,:)), (x_N(j,:) + 0.5*k2_x(j,:)), m_N(i), m_N(j));
            end
        end
    end

    k3_v = h* F2./m_N;
    k3_x = h*(v_N + 0.5*k2_v);
    
    F3 = zeros(n,2);
    for i=1:n
        for j=1:n
            if j~=i
                F3(i,:) = F3(i,:) + Grav_Pot((x_N(i,:) + k3_x(i,:)), (x_N(j,:) + k3_x(j,:)), m_N(i), m_N(j));
            end
        end
    end

    k4_v = h*F3./m_N;
    k4_x = h*(v_N + k3_v);


    k1_v = h * dvdt;
    k1_x = h * dxdt;
%     
%     k2_v = dt * grav_force(x + 0.5 * k1_x, m) ./ m;
%     k2_x = dt * (v + 0.5 * k1_v);
%     
%     k3_v = dt * grav_force(x + 0.5 * k2_x, m) ./ m;
%     k3_x = dt * (v + 0.5 * k2_v);
%     
%     k4_v = dt * grav_force(x + k3_x, m) ./ m;
%     k4_x = dt * (v + k3_v);
    
    % Aktualisierte Positionen und Geschwindigkeiten
    x_Nneu = x_N + (1/6) * [k1_x + 2*k2_x + 2*k3_x + k4_x];
    v_Nneu = v_N + (1/6) * [k1_v + 2*k2_v + 2*k3_v + k4_v];
    for i = 1:n
        x_positions(i, :, iteration) = x_Nneu(i, :);
    end
end

% tic
% while t < t_end
%     t = t + h;
%     iteration = iteration + 1;
%     k_1(:,:) = x_N(:,:) + h*v_N(:,:) + F(:,:).*h*0.5./m_N;
%     F_1 = zeros(n,2);
%     for i=1:n
%         for j=1:n
%             if j~=i
%                 F_1(i,:) = F_1(i,:) + Grav_Pot(k_1(i,:), k_1(j,:), m_N(i), m_N(j));
%             end
%         end
%     end
%     v_N1(:,:) = v_N(:,:) + bsxfun(@rdivide, (F(:,:)+F_1(:,:)), 2*m_N)*h;
% 
%     k_2(:,:) = x_N(:,:) + 0.5*h*(k_1 - x_N) + (0.5*h)*(v_N1(:,:) + F(:,:).*(0.5*h)*0.5./m_N);
%     F_2 = zeros(n,2);
%     for i=1:n
%         for j=1:n
%             if j~=i
%                 F_2(i,:) = F_2(i,:) + Grav_Pot(k_2(i,:), k_2(j,:), m_N(i), m_N(j));
%             end
%         end
%     end
%     v_N2(:,:) = v_N(:,:) + bsxfun(@rdivide, (F(:,:)+F_2(:,:)), 2*m_N)*h;
% 
%     k_3 = (x_N + 0.5*h*(k_2 - x_N)) + (0.5*h)*(v_N2(:,:) + F(:,:).*(0.5*h)*0.5./m_N);
%     F_3 = zeros(n,2);
%     for i=1:n
%         for j=1:n
%             if j~=i
%                 F_3(i,:) = F_3(i,:) + Grav_Pot(k_3(i,:), k_3(j,:), m_N(i), m_N(j));
%             end
%         end
%     end
%     v_N3(:,:) = v_N(:,:) + bsxfun(@rdivide, (F(:,:)+F_3(:,:)), 2*m_N)*h;
% 
%     k_4(:,:) = x_N + h*(k_3 - x_N) + h*(v_N3(:,:) + F(:,:).*h*0.5./m_N);
%     x_Nneu = (1/6)*(k_1 + 2*k_2 +2*k_3 +k_4);
% 
% %     for i = 1:n
% %         k_1(i,:) = (x_N(i,:) + h*(v_N(i,:) + F(i,:)*h*0.5/m_N(i))) - x_N(i,:); % k_1 gleich wie x_N, k_1 = f(x,t)
% % 
% %         k_2(i,:) = ((x_N(i,:) + 0.5*h*k_1(i,:)) + (0.5*h)*(v_N(i,:) + F(i,:)*(0.5*h)*0.5/m_N(i))) - x_N(i,:); % k_2 = f(x+0.5*h*k_1, t+0.5*h), Steigung zur Position bei halber Schrittweite
% %         k_3(i,:) = ((x_N(i,:) + 0.5*h*k_2(i,:)) + (0.5*h)*(v_N(i,:) + F(i,:)*(0.5*h)*0.5/m_N(i))) - x_N(i,:); % k_3 = f(x+0.5*h*k_2, t+0.5*h)
% %         k_4(i,:) = ((x_N(i,:) + h*k_3(i,:)) + h*(v_N(i,:) + F(i,:)*h*0.5/m_N(i))) - x_N(i,:); % k_4 = f(x+h*k_3, t+h)
% %         x_Nneu(i,:) = x_N(i,:) + (1/6)*(k_1(i,:)+2*k_2(i,:)+2*k_3(i,:)+k_4(i,:));
% %     end
%     F_neu = zeros(n,2);
%     for i=1:n
%         for j=1:n
%             if j~=i
%                 F_neu(i,:) = F_neu(i,:) + Grav_Pot(x_Nneu(i,:), x_Nneu(j,:), m_N(i), m_N(j));
%             end
%         end
%     end
%     for i=1:n
%         v_Nneu(i,:) = v_N(i,:) + 0.5/m_N(i)*(F(i,:) + F_neu(i,:))*h;
%     end

%     F = F_neu;
%     x_N = x_Nneu;
%     v_N = v_Nneu;

for s = 1:iteration
    for i = 1:n
        plot(x_positions(i,1,s), x_positions(i,2,s), C{i}, 'LineWidth', 1);
    end
end
title('Planetenbewegung');
legend('s = Sonne', 'b = Erde', 'r = Jupiter', 'g = Haley');
grid on;

toc

